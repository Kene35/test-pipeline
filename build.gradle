buildscript {
	repositories {
		maven { 
			url "http://repository.nscorp.com:8084/nexus/content/groups/NSRepository"
			allowInsecureProtocol true
		}
	}
	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.5.1'
		classpath 'io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE'
//		classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.0'
//		classpath "org.ajoberstar.grgit:grgit-gradle:3.1.1"
//		classpath "org.ajoberstar.grgit:grgit-core:3.1.1"
//		classpath "org.sonatype.gradle.plugins:scan-gradle-plugin:2.0.1"
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'jacoco'
//apply plugin: "org.ajoberstar.grgit"
//apply plugin: 'com.gorylenko.gradle-git-properties'
// apply plugin: "org.sonatype.gradle.plugins.scan"

group = 'com.nscorp'
//sourceCompatibility = '11'

repositories {
	maven { 
		url "http://repository.nscorp.com:8084/nexus/content/groups/NSRepository" 
		allowInsecureProtocol true
	}
	maven {
		url "http://nsos-pr1-nex.atldc.nscorp.com:8081/repository/ns-shared-jars"
		allowInsecureProtocol true
	}
}

dependencies {
//	implementation 'org.apache.tomcat.embed:tomcat-embed-core:9.0.48'
//	implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:9.0.48'
	implementation 'org.apache.tomcat.embed:tomcat-embed-el:9.0.48'
	implementation ('org.springframework.boot:spring-boot-starter-data-rest')
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'com.ibm.db2.jcc:db2jcc_license_cisuz:1.3.1'
	implementation 'com.ibm.db2.jcc:db2jcc:1.6.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
	implementation 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.security:spring-security-test'
	
//	testImplementation(platform('org.junit:junit-bom:5.7.2'))
//	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'junit:junit:4.13.2'
}

defaultTasks 'bootJar'
println rootProject.getAllprojects()

/*
task getAppDependencies {
//	doLast {
		def scrProjects = rootProject.getAllprojects()
		for (Project eachProj: scrProjects){
			println 'project = ' + eachProj.getName()
			def cfs = eachProj.getConfigurations()
			for (Configuration cf: cfs){
//				println 'config = ' + cf.getName()
				if (cf.getName().equals("testRuntimeClasspath")){
					cf.resolve()
					println 'getting deps for ' + cf.getName()
					def rcf = cf.getResolvedConfiguration()
					def dps = rcf.getFirstLevelModuleDependencies()
//					def dps = rcf.getAllDependencies()
					println dps.size()
					for (ResolvedDependency dp: dps){
						println dp.getModuleGroup() + ':' + dp.getModuleName() + ':' + dp.getModuleVersion()
					}
				}
			}
		}
//	}
}
*/

jar {
	enabled = false
}

task moveJar {
	doLast {
		copy {
	        from "build/libs"
    	    into "docker"
        	include "*.jar"
		}
/*
		copy {
			from configurations.runtimeClasspath
			into "$buildDir/depjars"
		}
		copy {
			from configurations.compileClasspath
			into "$buildDir/depjars"
		}
		copy {
			from configurations.testRuntimeClasspath
			into "$buildDir/depjars"
		}
		copy {
			from configurations.testCompileClasspath
			into "$buildDir/depjars"
		}
*/
	}
}

task cleanDockerDir {
	doLast {
		delete fileTree('docker') {
			include '**/*.jar'
		}	
	}
}

jar.finalizedBy moveJar
//jar.finalizedBy getAppDependencies
clean.finalizedBy cleanDockerDir
//dependencies.finalizedBy getAppDependencies

test {
	//we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}

jacocoTestReport {
	reports {
    	xml.enabled true
  	}
}
